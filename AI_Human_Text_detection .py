#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import math
import warnings
from sklearn.model_selection import StratifiedKFold
from matplotlib.font_manager import FontProperties
warnings.filterwarnings('ignore')
plt.style.use('ggplot')
get_ipython().run_line_magic('matplotlib', 'inline')


# In[2]:


df=pd.read_csv("AI_Human.csv")


# In[3]:


df.head()


# # Text

# In[4]:


for text in range (1):
    print(text,df['text'][text])


# In[5]:


df['len']=df['text'].apply(len)


# In[6]:


df


# # Simple ETL

# In[7]:


human=df[df['generated']==1]
ai=df[df['generated']==0]


# In[8]:


total_reviews = len(human) + len(ai)
percentage_negative = (len(human) / total_reviews) * 100

print(f"The dataset contains {len(human)} texts written by humans.")
print(f"The dataset contains {len(ai)} texts generated by AI.")
print(f"We have a well-balanced database.")


# In[9]:


df['generated_cor'] = df['generated'].replace({
    1: 'Human',
    0: 'AI'
})


# In[10]:


df


# In[11]:


sns.set(style="whitegrid", context="talk")

plt.figure(figsize=(13, 7))
ax = sns.barplot(y='len', x='generated_cor', data=df, palette='viridis')

ax.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: "{:,}".format(int(x))))
for p in ax.patches:
    height = p.get_height()
    ax.annotate('{:0.0f}'.format(height), (p.get_x() + p.get_width() / 2., height + 5), ha='center', va='center', fontsize=14, color='black', xytext=(0, 5), textcoords='offset points')

plt.title('Quantity of Characters by Type', fontsize=24)
plt.xlabel('Type', fontsize=18)
plt.ylabel('Characters', fontsize=18)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)
plt.show()


# # Machine Learning

# In[12]:


from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB, ComplementNB
from sklearn.svm import LinearSVC
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import learning_curve


# In[14]:


vectorizer = TfidfVectorizer()
text = vectorizer.fit_transform(df['text'])


# In[15]:


text.shape


# In[16]:


from sklearn.decomposition import TruncatedSVD


# Create a TruncatedSVD object and fit the data
svd = TruncatedSVD(n_components=50)
svd.fit(text)

# Transform the data using the TruncatedSVD
transformed_data = svd.transform(text)

# Get the explained variance ratios
explained_variance_ratios = svd.explained_variance_ratio_

print("Transformed data shape:", transformed_data.shape)
print("Explained variance ratios:", explained_variance_ratios)


# In[17]:


MNB = MultinomialNB()
CNB = ComplementNB()
SVC = LinearSVC()
lor = LogisticRegression()


# In[18]:


from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(text,df['generated_cor'],test_size=0.2)


# In[19]:


MNB.fit(x_train,y_train)


# In[20]:


CNB.fit(x_train,y_train)


# In[21]:


SVC.fit(x_train,y_train)


# In[22]:


lor.fit(x_train,y_train)


# In[23]:


predictMNB = MNB.predict(x_test)
predictCNB = CNB.predict(x_test)
predictCSV = SVC.predict(x_test)
predictlor = lor.predict(x_test)


# In[24]:


mnb = accuracy_score(y_test,predictMNB)
cnb = accuracy_score(y_test,predictCNB)
svc = accuracy_score(y_test,predictCSV)
lr = accuracy_score(y_test,predictlor)


# In[25]:


print(f"MNB: {mnb*100:.2f}%")
print(f"CNB: {cnb*100:.2f}%")
print(f"SVC: {svc*100:.2f}%")
print(f"lor:{lr*100:.2f}%")


# In[26]:


print("Classification Report for Multinomial Naive Bayes:")
print(classification_report(y_test, predictMNB))
print("\nClassification Report for Complement Naive Bayes:")
print(classification_report(y_test, predictCNB))
print("\nClassification Report for Support Vector Classifier:")
print(classification_report(y_test, predictCSV))
print("\nClassification Report for Logistic Regression Classifier:")
print(classification_report(y_test, predictlor))


# In[27]:


human_sentence = ["Jenna Branson is a college student suffering from mental illness. Unhappy at home, she decides to run away after becoming noncompliant with her medication."]

sen = vectorizer.transform(human_sentence)

print(lor.predict(sen))
print(MNB.predict(sen))
print(CNB.predict(sen))
print(SVC.predict(sen))


# In[28]:


human_sentence = ["Every morning, the sun's golden rays bring a promise of new adventures and endless possibilities."]

sen = vectorizer.transform(human_sentence)

print(lor.predict(sen))
print(MNB.predict(sen))
print(CNB.predict(sen))
print(SVC.predict(sen))


# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:




